@using System.Web
@using THECinema.Common
@model THECinema.Web.ViewModels.Movies.FullInfoMovieViewModel
@{
    ViewData["Title"] = "Details";

    var url = Model.TrailerVideoUrl;
    var uri = new Uri(url);
    var query = HttpUtility.ParseQueryString(uri.Query);
    var videoId = query["v"];
}
<link href="~/css/details.css" rel="stylesheet" asp-append-version="true" />
<link href="~/lib/fontawesome/css/all.css" rel="stylesheet" asp-append-version="true" />

<h1 class="text-center">@Model.Name</h1>

<div class="clearfix">
    <div class="box" id="imgBox">
        <img class="float-left" src="@Model.TrailerUrl" />
    </div>
    <div class="box" id="middleBox">
        <h5>Director</h5>
        <h7>@Model.Director</h7>
        <h5>Actors</h5>
        <h7>@Model.Actors</h7>
        <h5>Resume</h5>
        <p>@Model.Description</p>
        <h5>IMDb Rating</h5>
        <p>@Model.Rating</p>
    </div>
    <div class="box">
        <h5>Duration</h5>
        <h7>@Model.Duration minutes</h7>
        <h5>Year</h5>
        <h7>@Model.Year</h7>
        <h5>Genre</h5>
        <h7>@Model.Genre</h7>
        <hr />
        <a href="#" onclick="ShowForm('trailer')" class="btn btn-warning">WATCH TRAILER</a>
        <a href="/Projections/GetById?filmId=@Model.Id" id="bookBtn" class="btn btn-success">BOOK TICKET</a>
        <hr />
        @if (this.User.Identity.IsAuthenticated)
        {
            <a href="#" onclick="ShowForm('writeReviewForm')" class="btn btn-outline-secondary">WRITE REVIEW</a>
        }
    </div>
</div>

<div id="trailer">
    <iframe width="960" height="480"
            src="https://www.youtube.com/embed/@videoId">
    </iframe>
</div>

<h2 class="text-center">Reviews</h2>

@if (!Model.Reviews.Any())
{
    <div id="noReviews">
        <h5 align="center">There are still no reviews for this movie.</h5>
        @if (this.User.Identity.IsAuthenticated)
        {
            <a align="center" href="#" onclick="ShowForm('writeReviewForm')"><h5>Be the first one to write a review!</h5></a>
        }
    </div>
}

<div>
    <form asp-controller="Reviews" asp-action="Add" method="post" id="writeReviewForm" style="display: none">

        <div class="stars form-group">
            <input type="radio" id="star5" name="Stars" value="5" />
            <label for="star5" title="5 stars"></label>
            <input type="radio" id="star4" name="Stars" value="4" />
            <label for="star4" title="4 stars"></label>
            <input type="radio" id="star3" name="Stars" value="3" />
            <label for="star3" title="3 stars"></label>
            <input type="radio" id="star2" name="Stars" value="2" />
            <label for="star2" title="2 stars"></label>
            <input type="radio" id="star1" name="Stars" value="1" />
            <label for="star1" title="1 star"></label>
        </div>

        <div class="form-group">
            <label for="Title">Title</label>
            <input Name="Title" class="form-control" />
        </div>
        <div class="form-group">
            <label for="Content">Content</label>
            <textarea name="Content" class="form-control"></textarea>
        </div>
        <hr />
        <input type="hidden" name="MovieId" value="@Model.Id" />
        <div>
            <button onclick="AddReview('writeReviewForm')" class="btn btn-success">Add Review</button>
        </div>
    </form>
</div>

<hr />

@foreach (var review in Model.Reviews)
{
    <div>
        <form method="post" id="editReviewForm@(review.Id)" style="display: none">

            <div class="form-group">
                <label for="Title">Title</label>
                <input Name="Title" class="form-control" value="@review.Title" />
            </div>
            <div class="form-group">
                <label for="Content">Content</label>
                <textarea name="Content" class="form-control">@Html.Raw(review.CleanContent)</textarea>
            </div>
            <hr />
            <input type="hidden" name="MovieId" value="@Model.Id" />
            <input type="hidden" name="Id" value="@review.Id" />
            <div>
                <button onclick="EditReview('editReviewForm@(review.Id)', 'reviewCard@(review.Id)', 'editedReviewDiv@(review.Id)')" class="btn btn-success">Edit Review</button>
            </div>
            <hr />
        </form>
    </div>

    <div id="editedReviewDiv@(review.Id)"></div>

    @if (review.Stars == 0)
    {
        review.Stars = 1;
    }

    <div class="card" id="reviewCard@(review.Id)">
        <div class="card-header">
            Created by:
            <strong>@review.ApplicationUserUserName</strong>
            On
            <time datetime="@review.CreatedOn.ToString("O")"></time>
            <div class="float-right">
                @for (int i = 0; i < 5; i++)
                {
                    if (review.Stars > 0)
                    {
                        <span class="fa fa-star checked"></span>
                        review.Stars--;
                    }
                    else
                    {
                        <span class="fa fa-star"></span>
                    }
                }
            </div>
        </div>
        <div class="card-body">
            <h5 class="card-title">@review.Title</h5>
            <p class="card-text">@Html.Raw(review.CleanContent)</p>
            @if (this.User.Identity.IsAuthenticated)
            {
                @if (this.User.IsInRole(GlobalConstants.AdministratorRoleName))
                {
                    <button onclick="Delete('reviewCard@(review.Id)', '@review.Id', 'review')" class="btn btn-outline-danger float-right ml-1">Delete</button>
                }

                @if (this.User.Identity.Name == review.ApplicationUserUserName)
                {
                    <a href="#" onclick="ShowForm('editReviewForm@(review.Id)')" class="btn btn-outline-warning editReviewBtn float-right ml-1">Edit</a>
                }
                <a href="#" onclick="ShowForm('commentForm@(review.Id)')" class="btn btn-outline-success float-right">Comment</a>
            }
        </div>
    </div>

    foreach (var comment in review.Comments)
    {
        <div>
            <form method="post" id="editCommentForm@(comment.Id)" style="display: none">
                <div class="form-group">
                    <label for="Content">Content</label>
                    <textarea name="Content" class="form-control">@Html.Raw(comment.CleanContent)</textarea>
                </div>
                <hr />
                <input type="hidden" name="MovieId" value="@Model.Id" />
                <input type="hidden" name="Id" value="@comment.Id" />
                <div>
                    <button onclick="EditComment('editCommentForm@(comment.Id)', 'commentCard@(comment.Id)', 'editCommentDiv@(comment.Id)')" class="btn btn-success">Edit Comment</button>
                </div>
                <hr />
            </form>
        </div>

        <div id="editCommentDiv@(comment.Id)"></div>

        <div class="card custom-comment float-right" id="commentCard@(comment.Id)">
            <div class="card-header">
                Created by:
                <strong>@comment.ApplicationUserUserName</strong>
                On
                <time datetime="@comment.CreatedOn.ToString("O")"></time>
            </div>
            <div class="card-body">
                <p class="card-text">@Html.Raw(comment.CleanContent)</p>
                @if (this.User.Identity.IsAuthenticated)
                {
                    @if (this.User.IsInRole(GlobalConstants.AdministratorRoleName))
                    {
                        <button onclick="Delete('commentCard@(comment.Id)', '@comment.Id', 'comment')" class="btn btn-outline-danger float-right ml-1">Delete</button>
                    }

                    @if (this.User.Identity.Name == comment.ApplicationUserUserName)
                    {
                        <a href="#" onclick="ShowForm('editCommentForm@(comment.Id)')" class="btn btn-outline-warning editReviewBtn float-right ml-1">Edit</a>
                    }
                }
            </div>
        </div>
        <div class="clearfix"></div>
    }

    <div>
        <form method="post" id="commentForm@(review.Id)" style="display: none">

            <textarea name="Content"></textarea>

            <hr />
            <input type="hidden" name="MovieId" value="@Model.Id" />
            <input type="hidden" name="ReviewId" value="@review.Id" />
            <div>
                <button onclick="AddComment('commentForm@(review.Id)', 'commentsDiv@(review.Id)')" class="btn btn-success">Add Comment</button>
            </div>
        </form>
    </div>

    <div id="commentsDiv@(review.Id)"></div>
}

<div id="reviewsDiv"></div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/tinymce/tinymce.min.js" type="text/javascript"></script>
<script src="~/lib/moment/min/moment-with-locales.min.js" type="text/javascript"></script>

<script type="text/javascript">
    function ShowForm(id) {
        tinymce.init({
        selector: "textarea",
        plugins: ["image paste table link code media"],
        setup: function (editor) {
            editor.on('change', function () {
                editor.save();
            });
        }
    });

        $("#" + id).show();
        $('html, body').animate({
            scrollTop: $("#" + id).offset().top
        }, 500);
    }

    var token = $("#writeReviewForm input[name=__RequestVerificationToken]").val();

    function AddComment(formId, commentId) {
        event.preventDefault();
        $("#" + formId).hide();

        var username = '@this.User.Identity.Name';
        var data = $("#" + formId).serialize();

        $.ajax({
            url: "/Comments/Add",
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            headers: { 'X-CSRF-TOKEN': token },
            data: data,
            complete: function (data) {
                var parsedData = JSON.parse(data.responseText)

                var editbtn = '';

                if (username == parsedData.applicationUserUserName)
                {
                    editbtn = `<button onclick="ShowForm('editCommentForm${parsedData.id}')" class="btn btn-outline-warning float-right ml-1">Edit</button>`;
                }

                $("#" + commentId).append(
                    `
                    <form method="post" id="editCommentForm${parsedData.id}" style="display: none">
                        <div class="form-group">
                            <label for="Content">Content</label>
                            <textarea name="Content" class="form-control">${parsedData.cleanContent}</textarea>
                        </div>
                        <hr />
                        <input type="hidden" name="Id" value="${parsedData.id}" />
                        <div>
                            <button onclick="EditComment('editCommentForm${parsedData.id}', 'commentCard${parsedData.id}', 'editCommentDiv${parsedData.id}')" class="btn btn-success">Edit Comment</button>
                        </div>
                        <hr />
                    </form>

                    <div id="editCommentDiv${parsedData.id}"></div>

                    <div class="card custom-comment float-right" id="commentCard${parsedData.id}">
                    <div class="card-header">
                        Created by:
                        <strong>${parsedData.applicationUserUserName}</strong>
                        On
                        <time>${moment(parsedData.createdOn).format("ddd, MMM, D, YYYY, h:mm A")}</time>
                    </div>
                    <div class="card-body">
                        <p class="card-text">${parsedData.cleanContent}</p>
                       @if (this.User.Identity.IsAuthenticated)
                        {
                            @if (this.User.IsInRole(GlobalConstants.AdministratorRoleName))
                            {
                                <button onclick="Delete('commentCard${parsedData.id}', '${parsedData.id}', 'comment')" class="btn btn-outline-danger float-right ml-1">Delete</button>
                            }

                             <text>${editbtn}</text>
                        }
                    </div>
                </div>
                <div class="clearfix"></div>`);
            }
        });
    }

    function AddReview(formId) {
        event.preventDefault();
        $("#" + formId).hide();
        $("#noReviews").hide();

        var data = $("#" + formId).serialize();
        var username = '@this.User.Identity.Name';

        $.ajax({
            url: "/Reviews/Add",
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            headers: { 'X-CSRF-TOKEN': token },
            data: data,
            complete: function (data) {
                var parsedData = JSON.parse(data.responseText)
                var stars = '';

                for (var i = 0; i < 5; i++)
                {
                    if (parsedData.stars > 0)
                    {
                        stars += `<span class="fa fa-star checked"></span>`;
                        parsedData.stars--;
                    }
                    else
                    {
                        stars += `<span class="fa fa-star"></span>`;
                    }
                }

                var editbtn = '';

                if (username == parsedData.applicationUserUserName)
                {
                    editbtn = `<button onclick="ShowForm('editReviewForm${parsedData.id}')" class="btn btn-outline-warning float-right ml-1">Edit</button>`;
                }

                $("#reviewsDiv").append(`
                    <form method="post" id="editReviewForm${parsedData.id}" style="display: none">
                    <div class="form-group">
                    <label for="Title">Title</label>
                    <input Name="Title" class="form-control" value="${parsedData.title}" />
                    </div>
                    <div class="form-group">
                        <label for="Content">Content</label>
                        <textarea name="Content" class="form-control">${parsedData.cleanContent}</textarea>
                    </div>
                    <hr />
                    <input type="hidden" name="Id" value="${parsedData.id}" />
                    <div>
                       <button onclick="EditReview('editReviewForm${parsedData.id}', 'reviewCard${parsedData.id}', 'editedReviewDiv${parsedData.id}')" class="btn btn-success">Edit Review</button>
                    </div>
                    <hr />
                    </form>

                    <div id="editedReviewDiv${parsedData.id}"></div>

                    <div class="card" id="reviewCard${parsedData.id}">
                    <div class="card-header">
                        Created by:
                        <strong>${parsedData.applicationUserUserName}</strong>
                        On
                        <time>${moment(parsedData.createdOn).format("ddd, MMM, D, YYYY, h:mm A")}</time>
                        <div class="float-right">
                           ${stars}
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">${parsedData.title}</h5>
                        <p class="card-text">${parsedData.cleanContent}</p>
                        @if (this.User.Identity.IsAuthenticated)
                        {
                            @if (this.User.IsInRole(GlobalConstants.AdministratorRoleName))
                            {
                                <button onclick="Delete('reviewCard${parsedData.id}', '${parsedData.id}', 'review')" class="btn btn-outline-danger float-right ml-1">Delete</button>
                            }

                            <text>${editbtn}</text>

                            <a href="#" onclick="ShowForm('commentForm${parsedData.id}')" class="btn btn-outline-success float-right">Comment</a>
                            }
                    </div>
                </div>

                <div>
                <form method="post" id="commentForm${parsedData.id}" style="display: none">
                    <textarea name="Content"></textarea>
                    <hr />
                    <input type="hidden" name="ReviewId" value="${parsedData.id}" />
                    <div>
                        <button onclick="AddComment('commentForm${parsedData.id}', 'commentsDiv${parsedData.id}')" class="btn btn-success">Add Comment</button>
                    </div>
                </form>
            </div>

            <div id="commentsDiv${parsedData.id}"></div>`);

            }
        });
    }

    function EditComment(formId, oldCommentCard, editedCommentDiv) {
        event.preventDefault();
        $("#" + formId).hide();
        $("#" + oldCommentCard).hide();

        var username = '@this.User.Identity.Name';
        var data = $("#" + formId).serialize();

        $.ajax({
            url: "/Comments/Edit",
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            headers: { 'X-CSRF-TOKEN': token },
            data: data,
            complete: function (data) {
                var parsedData = JSON.parse(data.responseText)

                var editbtn = '';

                if (username == parsedData.applicationUserUserName)
                {
                    editbtn = `<button onclick="ShowForm('editCommentForm${parsedData.id}')" class="btn btn-outline-warning float-right ml-1">Edit</button>`;
                }

                $("#" + editedCommentDiv).append(
                `<div class="card custom-comment float-right" id="commentCard${parsedData.id}">
                    <div class="card-header">
                        Created by:
                        <strong>${parsedData.applicationUserUserName}</strong>
                        On
                        <time>${moment(parsedData.createdOn).format("ddd, MMM, D, YYYY, h:mm A")}</time>
                    </div>
                    <div class="card-body">
                        <p class="card-text">${parsedData.cleanContent}</p>
                       @if (this.User.Identity.IsAuthenticated)
                        {
                            @if (this.User.IsInRole(GlobalConstants.AdministratorRoleName))
                            {
                                <button onclick="Delete('commentCard${parsedData.id}', '${parsedData.id}', 'comment')" class="btn btn-outline-danger float-right ml-1">Delete</button>
                            }
                           <text>${editbtn}</text>
                        }
                    </div>
                </div>
                <div class="clearfix"></div>`);
            }
        });
    }

    function EditReview(formId, oldReviewCard, editedReviewDiv) {
        event.preventDefault();
        $("#" + formId).hide();
        $("#" + oldReviewCard).hide();

        var username = '@this.User.Identity.Name';
        var data = $("#" + formId).serialize();

        $.ajax({
            url: "/Reviews/Edit",
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            headers: { 'X-CSRF-TOKEN': token },
            data: data,
            complete: function (data) {
                var parsedData = JSON.parse(data.responseText)
                console.log(parsedData);
                var stars = '';

                for (var i = 0; i < 5; i++)
                {
                    if (parsedData.stars > 0)
                    {
                        stars += `<span class="fa fa-star checked"></span>`;
                        parsedData.stars--;
                    }
                    else
                    {
                        stars += `<span class="fa fa-star"></span>`;
                    }
                }

                var editbtn = '';

                if (username == parsedData.applicationUserUserName)
                {
                    editbtn = `<button onclick="ShowForm('editReviewForm${parsedData.id}')" class="btn btn-outline-warning float-right ml-1">Edit</button>`;
                }

                $("#" + editedReviewDiv).append(
                `<div class="card" id="reviewCard${parsedData.id}">
                    <div class="card-header">
                        Created by:
                        <strong>${parsedData.applicationUserUserName}</strong>
                        On
                        <time>${moment(parsedData.createdOn).format("ddd, MMM, D, YYYY, h:mm A")}</time>
                        <div class="float-right">
                           ${stars}
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">${parsedData.title}</h5>
                        <p class="card-text">${parsedData.cleanContent}</p>
                        @if (this.User.Identity.IsAuthenticated)
                        {
                            @if (this.User.IsInRole(GlobalConstants.AdministratorRoleName))
                            {
                                <button onclick="Delete('reviewCard${parsedData.id}', '${parsedData.id}', 'review')" class="btn btn-outline-danger float-right ml-1">Delete</button>
                            }

                            <text>${editbtn}</text>

                            <a href="#" onclick="ShowForm('commentForm${parsedData.id}')" class="btn btn-outline-success float-right">Comment</a>
                            }
                    </div>
                </div>`);
            }
        });
    }

    function Delete(cardId, Id, type) {
        event.preventDefault();

        var data = { id: Id };
        var route = '/';

        if (type == 'comment') {
            route = '/Comments/Delete';
        } else {
            route = '/Reviews/Delete';
        }

        $.ajax({
            url: route,
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            headers: { 'X-CSRF-TOKEN': token },
            data: data,
            complete: function (data) {
                $("#" + cardId).hide();
                try {
                    var parsedData = JSON.parse(data.responseText);
                    if (parsedData.commentIds.length > 0) {
                        parsedData.commentIds.forEach(id => $("#commentCard" + id).hide());
                    }
                } catch (e) {}
        }
    });
    }
</script>